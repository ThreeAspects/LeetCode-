class Solution {
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if(desiredTotal>(maxChoosableInteger+1)*maxChoosableInteger/2) return false;
        if(desiredTotal==(maxChoosableInteger+1)*maxChoosableInteger/2){
            return maxChoosableInteger%2==1;
        }
        return dfs(0,maxChoosableInteger,desiredTotal,new int[1<<maxChoosableInteger]);
    }
    public boolean dfs(int index,int maxChoosableInteger, int desiredTotal,int[] dp){
        if(dp[index]!=0){
            return dp[index]==1;
        }
        boolean result=false;
        for(int i=maxChoosableInteger;i>=1;i--){
            int curBit=1<<(i-1);
            if((index&curBit)==0){
                if(i>=desiredTotal||!dfs(curBit|index,maxChoosableInteger,desiredTotal-i,dp)){
                    result=true;
                    break;
                }
            }
        }
        dp[index]=result? 1:2;
        return result;
    }
}