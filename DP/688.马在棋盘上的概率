class Solution {
    double[][][] dp;
    int[][] weiyi={{-2,1},{-1,2},{-2,-1},{-1,-2},{2,1},{1,2},{2,-1},{1,-2}};
    public double knightProbability(int N, int K, int r, int c) {
        if(K==0) return 1.0d;
        dp=new double[N][N][K+1];
        return dfs(r,c,K,N);
    }
    public double dfs(int r, int c,int K,int N){
        if(dp[r][c][K]>0.0d) return dp[r][c][K];
        if(K==1){
            int count=0;
            for(int i=0;i<8;i++){
                if(r+weiyi[i][0]>=0&&r+weiyi[i][0]<N&&c+weiyi[i][1]>=0&&c+weiyi[i][1]<N){
                    count++;
                }
            }
            return 1.0*count/8;
        }else{
            double res=0.0d;
            for(int i=0;i<8;i++){
                if(r+weiyi[i][0]>=0&&r+weiyi[i][0]<N&&c+weiyi[i][1]>=0&&c+weiyi[i][1]<N){
                    res+=dfs(r+weiyi[i][0],c+weiyi[i][1],K-1,N);
                }
            }
            dp[r][c][K]=res/8;
        }
        return dp[r][c][K];
    }
}